------------------------------------------------------------------------------

Document the cause and resolution in the generated documentation.

------------------------------------------------------------------------------

Make sure the generated code can be made more meaningful to developers, so
instead of writing:

   Log.log_4000(i, str);

they can write:

   Log.log_FlexCapacitorFailing(i, str);

------------------------------------------------------------------------------

Separate Maven plugins:
- one for generating code
- one for generating documentation

------------------------------------------------------------------------------

Let the Maven plugin put the generated documentation in the correct location.

------------------------------------------------------------------------------

Only allow 'exceptionClass' attribute if 'exception' attribute is also set.

------------------------------------------------------------------------------

Do not require a translation for all log messages. If no translation is
available, then fall back to a default format that displays the parameters in
a quoted form. E.g.:

   10202 transaction="FNC-5569"; label=null; grtID=null; grxID="1233890-22"

------------------------------------------------------------------------------

Change directory structure for XSLT files, to for example:

   xslt/
   xslt/code/
   xslt/code/log4j/
   xslt/docs/
   xslt/docs/html/

------------------------------------------------------------------------------

Refactor LogDef class, remove XSLT transformation functionality.

------------------------------------------------------------------------------

Share the same versions of plugins across all pom.xml files.

------------------------------------------------------------------------------

Update the README to explain how to use the Maven plugin.

------------------------------------------------------------------------------

Make the automated test that tests the Logdoc version work.

------------------------------------------------------------------------------

Support multiple types of code generation, e.g.:
- SLF4J, see http://slf4j.org/
- Java Logging Framework (available since J2SE 1.4), see http://java.sun.com/javase/6/docs/technotes/guides/logging/
- Apache Commons Logging, see http://commons.apache.org/logging/
- Log4c, see http://log4c.sourceforge.net/
- Log4PHP, see http://logging.apache.org/log4php/
- Log::Log4perl, see http://mschilli.github.com/log4perl/

------------------------------------------------------------------------------

Support custom code generation, letting the user specify how to generate code.
This requires the user to provide XSLT.

------------------------------------------------------------------------------

Consider applying as an Apache project.

------------------------------------------------------------------------------

Consider moving all filter-related classes to a separate 'filter' package.
This may not be the best option, though.

------------------------------------------------------------------------------
